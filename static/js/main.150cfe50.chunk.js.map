{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","mainScene","THREE","mainCamera","window","innerWidth","innerHeight","position","z","y","backLight","set","add","fillLight","keyLight","renderer","setSize","document","body","appendChild","domElement","loader","GLTFLoader","modelContainer","load","gltf","scene","undefined","console","error","clock","render","delta","getDelta","rotation","requestAnimationFrame","React","Component","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,oJC4F5BC,G,wLAlFf,IAAMC,EAAY,IAAIC,IAEhBC,EAAa,IAAID,IACrB,EACAE,OAAOC,WAAaD,OAAOE,YAC3B,EACA,IAEFH,EAAWI,SAASC,EAAI,GACxBL,EAAWI,SAASE,EAAI,GAGxB,IAAMC,EAAY,IAAIR,IAAiB,MAAU,EAAG,IACpDQ,EAAUH,SAASI,KAAK,EAAG,GAAI,GAC/BV,EAAUW,IAAIF,GAEd,IAAMG,EAAY,IAAIX,IAAiB,MAAU,GAAK,IACtDW,EAAUN,SAASI,KAAK,EAAG,EAAG,GAC9BV,EAAUW,IAAIC,GAEd,IAAMC,EAAW,IAAIZ,IAAiB,SAAU,EAAG,IACnDY,EAASP,SAASI,IAAI,EAAG,EAAG,GAC5BV,EAAUW,IAAIE,GAId,IAAMC,EAAW,IAAIb,KACrBa,EAASC,QAAQZ,OAAOC,WAAYD,OAAOE,aAC3CW,SAASC,KAAKC,YAAYJ,EAASK,YAInC,IAAMC,EAAS,IAAIC,IAGbC,EAAiB,IAAIrB,IAC3BD,EAAUW,IAAIW,GAEdF,EAAOG,KACL,eACA,SAAAC,GACEF,EAAeX,IAAIa,EAAKC,cAE1BC,EACAC,QAAQC,OAcV,IAAMC,EAAQ,IAAI5B,KAElB,SAAS6B,IACP,IAAMC,EAAQF,EAAMG,WAGpBV,EAAeW,SAASzB,GAAa,GAARuB,EAG7BjB,EAASgB,OAAO9B,EAAWE,GAE3BgC,sBAAsBJ,GAExBA,K,+BAII,OACE,kC,GAhFYK,IAAMC,YCMJC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KAEE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLD,QAAQC,MAAMA,EAAMuB,c","file":"static/js/main.150cfe50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport * as THREE from \"three\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport './App.css';\n\nclass App extends React.Component {\n  componentDidMount() {\n    // Create Scene + Camera\n\nconst mainScene = new THREE.Scene()\n\nconst mainCamera = new THREE.PerspectiveCamera(\n  3,\n  window.innerWidth / window.innerHeight,\n  1,\n  50\n)\nmainCamera.position.z = 10\nmainCamera.position.y = 0.3\n// Add Point Lights\n\nconst backLight = new THREE.PointLight(0x00aaff, 3, 20)\nbackLight.position.set(-5, 5, -5)\nmainScene.add(backLight)\n\nconst fillLight = new THREE.PointLight(0x00aaff, 0.7, 20)\nfillLight.position.set(-5, 0, 5)\nmainScene.add(fillLight)\n\nconst keyLight = new THREE.PointLight(0xff00ff, 2, 20)\nkeyLight.position.set(5, 0, 0)\nmainScene.add(keyLight)\n\n// Create Renderer\n\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setSize(window.innerWidth, window.innerHeight)\ndocument.body.appendChild(renderer.domElement)\n\n// Load 3D Model\n\nconst loader = new GLTFLoader()\n//const modelFile = require('./scene.glb')\n\nconst modelContainer = new THREE.Group()\nmainScene.add(modelContainer)\n\nloader.load(\n  \"./scene.glb\",\n  gltf => {\n    modelContainer.add(gltf.scene)\n  },\n  undefined,\n  console.error\n)\n\n// Handle Window Resize\n\nfunction resizeRenderer() {\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  mainCamera.aspect = window.innerWidth / window.innerHeight\n  mainCamera.updateProjectionMatrix()\n}\n//window.addEventListener('resize', debounce(resizeRenderer, 50))\n\n// Render Scene\n\nconst clock = new THREE.Clock()\n\nfunction render() {\n  const delta = clock.getDelta()\n\n\n  modelContainer.rotation.y += delta * 0.5\n\n  \n  renderer.render(mainScene, mainCamera)\n  \n  requestAnimationFrame(render)\n}\nrender()\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}